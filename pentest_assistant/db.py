"""Database helpers for SQLModel and SQLite backend."""

from __future__ import annotations

from pathlib import Path
from typing import Iterator

from sqlmodel import SQLModel, Session, create_engine, select

from .models import Project

# SQLite database file path
DB_FILE = Path("app.db")
DATABASE_URL = f"sqlite:///{DB_FILE}"

# create engine; check_same_thread=False for multi-threaded access (as in FastAPI)
engine = create_engine(
    DATABASE_URL, echo=False, connect_args={"check_same_thread": False}
)


def init_db() -> None:
    """Create all database tables."""

    SQLModel.metadata.create_all(engine)


def get_session() -> Iterator[Session]:
    """Yield a new :class:`Session` object."""

    with Session(engine) as session:
        yield session


def seed_db() -> None:
    """Populate the database with an initial project if empty."""

    with Session(engine) as session:
        exists = session.exec(select(Project)).first()
        if exists is None:
            demo = Project(name="Demo Project", description="Initial seed project")
            session.add(demo)
            session.commit()
