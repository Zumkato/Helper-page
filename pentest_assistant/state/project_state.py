"""State management for projects and related entities."""

from __future__ import annotations

from typing import Any, List

from sqlmodel import select

from .app_state import AppState
from .. import models
from ..db import get_session
from ..services import executor, llm


class ProjectState(AppState):
    """Application state that handles project CRUD and service calls."""

    projects: List[dict] = []
    error: str | None = None

    async def load_projects(self) -> List[dict]:
        """Retrieve all projects from the database."""
        self.set_loading(True)
        self.error = None
        try:
            with get_session() as session:
                results = session.exec(select(models.Project)).all()
                self.projects = [p.model_dump() for p in results]
                return self.projects
        except Exception as exc:  # pragma: no cover - best effort
            self.error = str(exc)
            raise
        finally:
            self.set_loading(False)

    async def create_project(self, name: str, description: str | None = None) -> dict:
        """Create a new project and persist it."""
        self.set_loading(True)
        try:
            project = models.Project(name=name, description=description)
            with get_session() as session:
                session.add(project)
                session.commit()
                session.refresh(project)
            data = project.model_dump()
            self.projects.append(data)
            return data
        finally:
            self.set_loading(False)

    async def add_note(self, project_id: int, content: str) -> dict:
        """Add a note to a project."""
        note = models.Note(project_id=project_id, content=content)
        with get_session() as session:
            session.add(note)
            session.commit()
            session.refresh(note)
        return note.model_dump()

    async def run_command(self, project_id: int, command: str) -> dict:
        """Execute an allowlisted command via the executor service."""
        output = await executor.run(command)
        run = models.Run(project_id=project_id, command=command, output=output)
        with get_session() as session:
            session.add(run)
            session.commit()
            session.refresh(run)
        return run.model_dump()

    async def suggest_chain_steps(self, prompt: str) -> str:
        """Get attack chain step suggestions from the LLM service."""
        provider = llm.EchoLLM()
        return await provider.generate(prompt)
