"""Global application state utilities for Reflex UI."""

from __future__ import annotations

from typing import List

# Reflex may not be installed or may be incompatible with the environment.
# Attempt to import and access ``State``; fall back to a stub on any failure.
try:  # pragma: no cover - optional dependency
    import reflex as _rx
    _ = _rx.State  # ensure ``State`` is accessible
    rx = _rx
except Exception:  # pragma: no cover
    class rx:  # type: ignore
        class State:  # minimal stand-in for reflex.State
            pass


class AppState(rx.State):
    """Root state shared across the application.

    Attributes:
        is_loading: Flag indicating background work.
        toasts: Collected toast messages to display in the UI.
    """

    is_loading: bool = False
    toasts: List[str] = []

    def set_loading(self, value: bool) -> None:
        """Update the loading indicator."""
        self.is_loading = value

    def add_toast(self, message: str) -> None:
        """Push a toast notification into the queue."""
        self.toasts.append(message)

    def clear_toasts(self) -> None:
        """Remove all queued toast messages."""
        self.toasts.clear()
