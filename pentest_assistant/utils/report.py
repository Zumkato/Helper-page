"""Report generation utilities for exporting project data."""

from __future__ import annotations

from pathlib import Path
from typing import Iterable, List, Tuple, Optional

from markdown2 import markdown

try:  # Optional PDF support
    from weasyprint import HTML  # type: ignore
except Exception:  # pragma: no cover - optional dependency may be missing
    HTML = None  # type: ignore


def build_markdown(project: dict, notes: Iterable[dict], chain_steps: Iterable[str]) -> str:
    """Create a markdown representation of a project.

    Parameters
    ----------
    project:
        Project metadata dictionary (at minimum contains ``name`` and ``description``).
    notes:
        Iterable of note dictionaries with a ``content`` field.
    chain_steps:
        Iterable of attack chain step descriptions.

    Returns
    -------
    str
        The assembled markdown text.
    """
    lines: List[str] = []
    lines.append(f"# {project.get('name', 'Project')}")
    description = project.get("description")
    if description:
        lines.extend(["", description])
    lines.extend(["", "## Notes", ""])
    for note in notes:
        lines.append(f"- {note.get('content', '')}")
    lines.extend(["", "## Attack Chain", ""])
    for idx, step in enumerate(chain_steps, start=1):
        lines.append(f"{idx}. {step}")
    lines.append("")
    return "\n".join(lines)


def export_report(
    project: dict,
    notes: Iterable[dict],
    chain_steps: Iterable[str],
    output_dir: Path | str = Path("reports"),
    *,
    pdf: bool = False,
) -> Tuple[Path, Optional[Path]]:
    """Write a project report to disk in Markdown and optional PDF.

    Parameters
    ----------
    project, notes, chain_steps:
        Data used to build the report.
    output_dir:
        Directory where the report files will be written. Created if missing.
    pdf:
        When True and PDF dependencies are available, a PDF version is also written.

    Returns
    -------
    tuple(Path, Optional[Path])
        Paths to the Markdown file and, if generated, the PDF file.
    """
    out_dir = Path(output_dir)
    out_dir.mkdir(parents=True, exist_ok=True)
    markdown_text = build_markdown(project, notes, chain_steps)
    md_path = out_dir / f"project_{project.get('id', 'report')}_report.md"
    md_path.write_text(markdown_text)
    pdf_path: Optional[Path] = None
    if pdf and HTML is not None:
        html = markdown(markdown_text)
        pdf_path = out_dir / f"project_{project.get('id', 'report')}_report.pdf"
        HTML(string=html).write_pdf(str(pdf_path))
    return md_path, pdf_path
