"""Project detail page with tabs for notes, attack chains, and run history."""

from __future__ import annotations

import reflex as rx

from ...state.project_state import ProjectState
from ...utils.markdown import sanitize_markdown


def _note_item(note: dict) -> rx.Component:
    return rx.box(
        rx.text(sanitize_markdown(note["content"])),
        border="1px solid",
        padding="0.5em",
        margin_y="0.25em",
    )


def _run_item(run: dict) -> rx.Component:
    return rx.box(
        rx.text(f"$ {run['command']}", font_family="monospace"),
        rx.text(run["output"], font_size="sm"),
        border="1px solid",
        padding="0.5em",
        margin_y="0.25em",
    )


def _notes_tab() -> rx.Component:
    return rx.vstack(
        rx.foreach(ProjectState.notes, _note_item),
        rx.form(
            rx.vstack(
                rx.textarea(name="content", placeholder="New note", width="100%"),
                rx.button("Save", type="submit"),
            ),
            on_submit=ProjectState.handle_add_note,
        ),
    )


def _runs_tab() -> rx.Component:
    return rx.vstack(
        rx.foreach(ProjectState.runs, _run_item),
        rx.form(
            rx.hstack(
                rx.input(name="command", placeholder="Command"),
                rx.button("Run", type="submit"),
            ),
            on_submit=ProjectState.handle_run_command,
        ),
    )


def project_page(project_id: int) -> rx.Component:  # pragma: no cover - UI code
    """Render the project detail page."""
    return rx.vstack(
        rx.hstack(
            rx.heading(
                lambda: ProjectState.current_project.get("name", "Project"), size="lg"
            ),
            rx.spacer(),
            rx.button("Export Report", on_click=ProjectState.handle_export_report),
        ),
        rx.tabs(
            rx.tab_list(
                rx.tab("Notes"),
                rx.tab("Attack Chains"),
                rx.tab("Runs"),
            ),
            rx.tab_panels(
                rx.tab_panel(_notes_tab()),
                rx.tab_panel(
                    rx.link(
                        "Open attack chain builder",
                        href=lambda: f"/project/{ProjectState.current_project.get('id')}/chain",
                        color="blue",
                    )
                ),
                rx.tab_panel(_runs_tab()),
            ),
        ),
        rx.foreach(ProjectState.toasts, lambda m: rx.text(m, color="green")),
    )
